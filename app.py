import os
import streamlit as st
import groq
from datetime import date
import re
import json
import time
import base64

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(
    page_title="ADVJESUS - Assistente Jur√≠dico",
    page_icon="‚öñÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Credenciais de login
LOGIN_USERNAME = "jesus"
LOGIN_PASSWORD = "jr010507"

# Fun√ß√£o para criar anima√ß√£o de abertura
def show_intro_animation():
    # HTML para anima√ß√£o de abertura em amarelo e preto
    animation_html = """
    <style>
    @keyframes fadeIn {
        0% { opacity: 0; transform: scale(0.8); }
        50% { opacity: 1; transform: scale(1.1); }
        100% { opacity: 1; transform: scale(1); }
    }
    
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
    
    @keyframes slideIn {
        0% { transform: translateY(-50px); opacity: 0; }
        100% { transform: translateY(0); opacity: 1; }
    }
    
    .intro-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #000000 0%, #222222 100%);
        padding: 40px;
        border-radius: 10px;
        margin: 20px 0;
        box-shadow: 0 10px 30px rgba(0,0,0,0.5);
        animation: fadeIn 1.5s ease-out forwards;
    }
    
    .logo-container {
        background-color: #FFD700;
        width: 150px;
        height: 150px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 30px;
        box-shadow: 0 0 30px #FFD700;
        animation: pulse 2s infinite;
    }
    
    .logo-text {
        color: #000000;
        font-size: 28px;
        font-weight: bold;
        text-align: center;
    }
    
    .title {
        color: #FFD700;
        font-size: 48px;
        font-weight: bold;
        margin-bottom: 10px;
        text-align: center;
        text-shadow: 3px 3px 5px rgba(0,0,0,0.5);
        animation: slideIn 1s ease-out 0.5s forwards;
        opacity: 0;
    }
    
    .subtitle {
        color: white;
        font-size: 24px;
        margin-bottom: 30px;
        text-align: center;
        animation: slideIn 1s ease-out 0.8s forwards;
        opacity: 0;
    }
    
    .feature-list {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
        margin-top: 20px;
    }
    
    .feature-item {
        background-color: rgba(255, 215, 0, 0.1);
        border-left: 5px solid #FFD700;
        padding: 15px;
        border-radius: 5px;
        width: 220px;
        text-align: center;
        animation: slideIn 1s ease-out 1s forwards;
        opacity: 0;
    }
    
    .feature-item h3 {
        color: #FFD700;
        margin: 0 0 10px 0;
    }
    
    .feature-item p {
        color: white;
        margin: 0;
        font-size: 14px;
    }
    </style>
    
    <div class="intro-container">
        <div class="logo-container">
            <div class="logo-text">ADV<br>JESUS</div>
        </div>
        <div class="title">ADVJESUS</div>
        <div class="subtitle">Sistema Avan√ßado de Reda√ß√£o Jur√≠dica</div>
        
        <div class="feature-list">
            <div class="feature-item" style="animation-delay: 1.0s;">
                <h3>‚öñÔ∏è An√°lise</h3>
                <p>An√°lise inteligente de casos jur√≠dicos</p>
            </div>
            <div class="feature-item" style="animation-delay: 1.2s;">
                <h3>üìö Pesquisa</h3>
                <p>Pesquisa de legisla√ß√£o aplic√°vel</p>
            </div>
            <div class="feature-item" style="animation-delay: 1.4s;">
                <h3>üìù Reda√ß√£o</h3>
                <p>Reda√ß√£o profissional de peti√ß√µes</p>
            </div>
            <div class="feature-item" style="animation-delay: 1.6s;">
                <h3>‚úÖ Revis√£o</h3>
                <p>Revis√£o t√©cnica especializada</p>
            </div>
        </div>
    </div>
    
    <script>
        // Remove a anima√ß√£o ap√≥s 5 segundos
        setTimeout(function() {
            document.querySelector('.intro-container').style.display = 'none';
            // Reload para mostrar o app principal
            window.location.reload();
        }, 5000);
    </script>
    """
    
    st.markdown(animation_html, unsafe_allow_html=True)
    time.sleep(5)  # Espera 5 segundos para a anima√ß√£o

# Sistema de login
def login_page():
    st.markdown(
        """
        <style>
        .login-container {
            max-width: 400px;
            margin: 0 auto;
            padding: 40px;
            background: linear-gradient(135deg, #000000 0%, #222222 100%);
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.5);
        }
        .login-title {
            color: #FFD700;
            text-align: center;
            font-size: 36px;
            margin-bottom: 30px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        }
        .login-logo {
            text-align: center;
            margin-bottom: 20px;
        }
        .login-input {
            background-color: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 215, 0, 0.3);
            border-radius: 5px;
            color: white;
            padding: 10px 15px;
            margin-bottom: 15px;
            width: 100%;
        }
        .login-button {
            background-color: #FFD700;
            color: black;
            font-weight: bold;
            padding: 12px;
            border: none;
            border-radius: 5px;
            width: 100%;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .login-button:hover {
            background-color: #f0c800;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 215, 0, 0.4);
        }
        .stButton button {
            background-color: #FFD700 !important;
            color: black !important;
            font-weight: bold !important;
            padding: 12px !important;
            border: none !important;
            border-radius: 5px !important;
            width: 100% !important;
        }
        </style>
        
        <div class="login-container">
            <div class="login-logo">
                <img src="https://via.placeholder.com/150x150/FFD700/000000?text=ADVJESUS" width="150" height="150" style="border-radius: 50%;">
            </div>
            <h1 class="login-title">ADVJESUS</h1>
        </div>
        """,
        unsafe_allow_html=True
    )
    
    # Campos de login
    with st.form("login_form"):
        username = st.text_input("Usu√°rio", key="username")
        password = st.text_input("Senha", type="password", key="password")
        submit = st.form_submit_button("Entrar")
        
        if submit:
            if username == LOGIN_USERNAME and password == LOGIN_PASSWORD:
                st.session_state.logged_in = True
                st.session_state.show_animation = True
                st.experimental_rerun()
            else:
                st.error("Usu√°rio ou senha incorretos!")

# Configura√ß√£o da API Groq
api_key = os.getenv("GROQ_API_KEY", "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")

# Inicializa√ß√£o do cliente Groq
try:
    client = groq.Client(api_key=api_key)
except Exception as e:
    if 'logged_in' in st.session_state and st.session_state.logged_in:
        st.error(f"Erro ao inicializar o cliente Groq: {str(e)}")
        st.stop()

# Defini√ß√£o do sistema multi-agentes
AGENTES = {
    "Analisador": {
        "descricao": "Coleta informa√ß√µes e realiza an√°lise inicial do caso",
        "prompt_base": """
        Voc√™ √© um especialista jur√≠dico focado na an√°lise inicial de casos. Analise as informa√ß√µes fornecidas e:
        1. Identifique as partes envolvidas
        2. Extraia os fatos principais
        3. Defina os n√∫cleos textuais e eixos tem√°ticos relevantes
        4. Proponha uma classifica√ß√£o jur√≠dica inicial
        5. Identifique poss√≠veis fundamenta√ß√µes legais preliminares

        CASO COMPLETO:
        {texto_caso}
        
        Formate sua resposta de forma clara e objetiva, usando marcadores e subcabe√ßalhos para facilitar a leitura.
        """
    },
    "Pesquisador": {
        "descricao": "Realiza pesquisa jur√≠dica aprofundada e desenvolve estrat√©gias",
        "prompt_base": """
        Voc√™ √© um pesquisador jur√≠dico especializado. Com base na an√°lise inicial, realize:
        1. Identifica√ß√£o precisa dos objetos jur√≠dicos e direitos relevantes
        2. Sugest√£o de legisla√ß√£o aplic√°vel (artigos espec√≠ficos com reda√ß√£o literal)
        3. An√°lise de jurisprud√™ncias pertinentes (inclua exemplos reais de decis√µes importantes)
        4. Desenvolvimento de tr√™s estrat√©gias jur√≠dicas vi√°veis, claramente separadas com t√≠tulos como:
           - "ESTRAT√âGIA 1: [Nome da estrat√©gia]"
           - "ESTRAT√âGIA 2: [Nome da estrat√©gia]"
           - "ESTRAT√âGIA 3: [Nome da estrat√©gia]"
        
        Para cada estrat√©gia, apresente:
        - Fundamentos jur√≠dicos principais
        - Vantagens e riscos processuais
        - Probabilidade estimada de sucesso
        
        AN√ÅLISE INICIAL:
        {analise_inicial}
        
        Formate sua resposta de forma clara, usando marcadores e subcabe√ßalhos para facilitar a leitura.
        """
    },
    "Redator": {
        "descricao": "Constr√≥i e aprimora a peti√ß√£o inicial seguindo o CPC",
        "prompt_base": """
        Voc√™ √© um redator jur√≠dico especializado na cria√ß√£o de peti√ß√µes conforme o C√≥digo de Processo Civil (artigos 319 e 320). Elabore uma peti√ß√£o inicial completa e extremamente profissional contendo todos os elementos essenciais.
        
        Estruture a peti√ß√£o com as seguintes se√ß√µes claramente identificadas:
        
        1. ENDERE√áAMENTO (ju√≠zo competente)
        2. QUALIFICA√á√ÉO COMPLETA DAS PARTES (Nome, CPF/CNPJ, endere√ßo, etc.)
        3. NOME DA A√á√ÉO EM DESTAQUE
        4. FATOS (Narra√ß√£o clara e cronol√≥gica)
        5. FUNDAMENTOS JUR√çDICOS (Legisla√ß√£o e jurisprud√™ncia)
        6. PEDIDOS (Especifica√ß√µes precisas)
        7. VALOR DA CAUSA
        8. PROVAS (Especifica√ß√£o das provas a serem produzidas)
        9. REQUERIMENTOS FINAIS (Incluindo op√ß√£o por concilia√ß√£o)
        
        Utilize a estrat√©gia escolhida e as informa√ß√µes jur√≠dicas j√° identificadas:
        
        PESQUISA JUR√çDICA:
        {pesquisa_juridica}
        
        ESTRAT√âGIA ESCOLHIDA:
        {estrategia_escolhida}
        
        DADOS DO CLIENTE:
        {dados_cliente}
        
        Crie um documento completo, sem abrevia√ß√µes ou cortes, pronto para ser utilizado na pr√°tica forense.
        """
    },
    "Revisor": {
        "descricao": "Revisa e aperfei√ßoa a peti√ß√£o elaborada",
        "prompt_base": """
        Voc√™ √© um revisor jur√≠dico com vasta experi√™ncia. Revise a peti√ß√£o inicial fornecida considerando:
        
        1. Corre√ß√£o t√©cnica e jur√≠dica (verifique todos os fundamentos legais)
        2. Clareza e fluidez do texto (elimine par√°grafos confusos ou redundantes)
        3. Adequa√ß√£o √†s normas processuais vigentes (conforme CPC)
        4. Consist√™ncia argumentativa (alinhamento entre fatos, fundamentos e pedidos)
        5. Formata√ß√£o e apresenta√ß√£o profissional (sugest√µes de melhoria est√©tica)
        
        PETI√á√ÉO A REVISAR:
        {peticao}
        
        Apresente o resultado em duas partes:
        1. COMENT√ÅRIOS E SUGEST√ïES: Lista de pontos fortes e oportunidades de melhoria
        2. PETI√á√ÉO REVISADA: Vers√£o completa do documento com todas as corre√ß√µes implementadas
        """
    }
}

# CSS personalizado para a interface
st.markdown("""
<style>
    :root {
        --primary: #FFD700;
        --primary-dark: #e6c300;
        --accent: #000000;
        --text-light: #ffffff;
        --bg-dark: #000000;
        --bg-medium: #222222;
    }

    .main-header {
        font-size: 2.5rem;
        color: var(--primary);
        text-align: center;
        margin-bottom: 1rem;
        font-weight: bold;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
    }
    .sub-header {
        font-size: 1.5rem;
        color: var(--primary);
        margin-bottom: 1rem;
        border-bottom: 2px solid var(--primary);
        padding-bottom: 0.5rem;
    }
    .step-header {
        font-size: 1.2rem;
        color: var(--primary);
        margin-top: 1rem;
        font-weight: bold;
    }
    .result-area {
        background-color: var(--bg-medium);
        padding: 1.5rem;
        border-radius: 0.5rem;
        border: 1px solid var(--primary);
        margin: 1rem 0;
        color: var(--text-light);
        max-height: 500px;
        overflow-y: auto;
    }
    .strategy-card {
        background-color: rgba(255, 215, 0, 0.1);
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid var(--primary);
        margin: 1rem 0;
    }
    .strategy-title {
        font-weight: bold;
        color: var(--primary);
        font-size: 1.1rem;
    }
    .info-card {
        background-color: rgba(0, 0, 0, 0.7);
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid var(--primary);
        margin: 1rem 0;
    }
    /* Customiza√ß√£o de elementos Streamlit */
    .stButton>button {
        background-color: var(--primary) !important;
        color: black !important;
        font-weight: bold !important;
    }
    .stButton>button:hover {
        background-color: var(--primary-dark) !important;
        color: black !important;
    }
    .stProgress .st-bo {
        background-color: var(--primary);
    }
    /* Melhorias para textarea e tabs */
    .stTextArea>div>div>textarea {
        background-color: #f8f8f8;
        border: 1px solid #ddd;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 1px;
    }
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        white-space: pre-wrap;
        background-color: #333333;
        border-radius: 4px 4px 0 0;
        gap: 1px;
        padding-top: 10px;
        padding-bottom: 10px;
    }
    .stTabs [aria-selected="true"] {
        background-color: var(--primary);
        color: black;
    }
    /* Estilo para sidebar */
    .css-1d391kg {
        background-color: #111111;
    }
    .block-container {
        padding-top: 2rem;
    }
    /* Personaliza√ß√£o adicional para o tema preto e amarelo */
    .streamlit-expanderHeader {
        background-color: #333333;
        color: var(--primary);
    }
    .streamlit-expanderContent {
        background-color: #222222;
    }
</style>
""", unsafe_allow_html=True)

# Fun√ß√£o para extrair estrat√©gias do texto de pesquisa jur√≠dica
def extrair_estrategias(texto_pesquisa):
    estrategias = []
    padrao = r"ESTRAT√âGIA\s*\d+\s*:\s*([^\n]+)"
    matches = re.finditer(padrao, texto_pesquisa)
    
    for match in matches:
        estrategias.append(match.group(0))
    
    if not estrategias:
        estrategias = ["Estrat√©gia n√£o identificada"]
    
    return estrategias

# Fun√ß√£o para consultar a API Groq com a metodologia Advogado 5.0
def consultar_groq(agente, texto_input, parametros_adicionais=None):
    prompt_base = AGENTES[agente]["prompt_base"]
    
    # Construir o prompt completo
    if parametros_adicionais:
        prompt_completo = prompt_base.format(**parametros_adicionais)
    else:
        prompt_completo = prompt_base.format(texto_caso=texto_input)
    
    # Adicionar o sistema Advogado 5.0
    sistema_advogado = """
    [METODOLOGIA/CONCEITO] A metodologia "Advogado 5.0" √© estruturada em tr√™s sess√µes principais:
    1. Coleta de Informa√ß√µes e An√°lise Inicial - defini√ß√£o da estrat√©gia jur√≠dica com base nos fatos
    2. Pesquisa Jur√≠dica Aprofundada e Estrat√©gia - identifica√ß√£o de objetos jur√≠dicos e direitos relevantes
    3. Constru√ß√£o e Aprimoramento da Peti√ß√£o Inicial - elabora√ß√£o conforme CPC arts. 319 e 320
    
    Cada sess√£o √© detalhada para otimizar a coleta e an√°lise de dados, formular estrat√©gias jur√≠dicas e elaborar uma peti√ß√£o inicial eficaz.
    [/METODOLOGIA/CONCEITO]
    
    [COMPORTAMENTO] Voc√™ √© um mestre em direito especializado em construir peti√ß√µes com base no c√≥digo civil de 2015 e artigos 319 e 320 do CPC para an√°lise de dados e estrat√©gia jur√≠dica para subsun√ß√£o de casos ao direito brasileiro. Sua resposta deve ser t√©cnica, precisa e extremamente profissional. [/COMPORTAMENTO]
    
    [IMPORTANTE] Para todo e qualquer fato, princ√≠pio, prova ou jurisprud√™ncia, deve gerir alta pertin√™ncia ao processo e ao caso de acordo com uso da l√≥gica fuzzy em enquadramento de pertin√™ncia e relev√¢ncia, sem recorrer a argumenta√ß√µes vazias ou sem conex√£o l√≥gica. [/IMPORTANTE]
    """
    
    # Tentativas em caso de erro
    max_tentativas = 3
    for tentativa in range(max_tentativas):
        try:
            # Chamar a API do Groq
            chat_completion = client.chat.completions.create(
                model="llama3-70b-8192",  # Usando Llama 3 70B
                messages=[
                    {"role": "system", "content": sistema_advogado},
                    {"role": "user", "content": prompt_completo}
                ],
                temperature=0.7,
                max_tokens=4096,
                top_p=0.95,
                stream=False
            )
            return chat_completion.choices[0].message.content
        except Exception as e:
            if tentativa < max_tentativas - 1:
                # Esperar antes de tentar novamente (backoff exponencial)
                time.sleep(2 ** tentativa)
                continue
            else:
                return f"Erro ao consultar a API Groq ap√≥s {max_tentativas} tentativas: {str(e)}"

# Verificar se o usu√°rio est√° logado
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False

# Verificar se deve mostrar a anima√ß√£o
if 'show_animation' not in st.session_state:
    st.session_state.show_animation = False

# Mostrar tela de login se n√£o estiver logado
if not st.session_state.logged_in:
    login_page()
    st.stop()  # Parar execu√ß√£o aqui se n√£o estiver logado

# Mostrar anima√ß√£o de abertura se necess√°rio
if st.session_state.show_animation:
    show_intro_animation()
    st.session_state.show_animation = False
    st.experimental_rerun()

# Sidebar
with st.sidebar:
    st.image("https://via.placeholder.com/150x150/FFD700/000000?text=ADVJESUS", width=150)
    st.title("ADVJESUS")
    st.markdown("### Assistente Jur√≠dico IA")
    
    # Informa√ß√£o sobre a API
    api_status = "‚úÖ Conectado" if api_key else "‚ùå Desconectado"
    st.markdown(f"**Status da API Groq:** {api_status}")
    
    # Op√ß√£o para alterar chave API
    with st.expander("Configurar API"):
        custom_api_key = st.text_input("Chave API do Groq", type="password", value=api_key if api_key else "")
        if st.button("Atualizar Chave"):
            if custom_api_key:
                try:
                    # Teste da nova chave
                    teste_client = groq.Client(api_key=custom_api_key)
                    # Se n√£o der erro, atualiza
                    client = teste_client
                    api_key = custom_api_key
                    st.success("Chave API atualizada com sucesso!")
                except Exception as e:
                    st.error(f"Chave API inv√°lida: {str(e)}")
    
    st.markdown("---")
    st.markdown("### Sobre o Sistema")
    st.markdown("""
    O **ADVJESUS** utiliza a metodologia Advogado 5.0 e IA avan√ßada para:
    
    1. Analisar casos jur√≠dicos
    2. Pesquisar legisla√ß√£o aplic√°vel
    3. Desenvolver estrat√©gias processuais
    4. Redigir peti√ß√µes iniciais completas
    
    O sistema segue as diretrizes dos artigos 319 e 320 do CPC.
    """)
    
    # Progresso do processo
    if 'etapa_atual' not in st.session_state:
        st.session_state.etapa_atual = 1
    
    st.markdown("### Progresso do Processo")
    etapas = ["An√°lise", "Pesquisa", "Reda√ß√£o", "Revis√£o"]
    progresso = (st.session_state.etapa_atual / len(etapas)) * 100
    st.progress(progresso/100)
    
    for i, etapa in enumerate(etapas, 1):
        if i < st.session_state.etapa_atual:
            st.markdown(f"‚úÖ **Etapa {i}:** {etapa}")
        elif i == st.session_state.etapa_atual:
            st.markdown(f"üîÑ **Etapa {i}:** {etapa}")
        else:
            st.markdown(f"‚è≥ **Etapa {i}:** {etapa}")
    
    # Bot√£o de logout
    if st.button("Sair"):
        st.session_state.logged_in = False
        st.experimental_rerun()

# Cabe√ßalho principal
st.markdown("<h1 class='main-header'>ADVJESUS ‚öñÔ∏è</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center; color: #FFD700;'>Assistente de Reda√ß√£o Jur√≠dica com Tecnologia Avan√ßada</p>", unsafe_allow_html=True)

# Inicializa√ß√£o de vari√°veis de sess√£o
if 'analise_inicial' not in st.session_state:
    st.session_state.analise_inicial = ""
if 'pesquisa_juridica' not in st.session_state:
    st.session_state.pesquisa_juridica = ""
if 'estrategia_escolhida' not in st.session_state:
    st.session_state.estrategia_escolhida = ""
if 'estrategias_disponiveis' not in st.session_state:
    st.session_state.estrategias_disponiveis = []
if 'peticao_inicial' not in st.session_state:
    st.session_state.peticao_inicial = ""
if 'peticao_revisada' not in st.session_state:
    st.session_state.peticao_revisada = ""
if 'dados_cliente' not in st.session_state:
    st.session_state.dados_cliente = {}

# Tabs para organizar o fluxo de trabalho
tab1, tab2, tab3, tab4 = st.tabs(["1Ô∏è‚É£ Fatos do Caso", "2Ô∏è‚É£ Pesquisa Jur√≠dica", "3Ô∏è‚É£ Reda√ß√£o da Peti√ß√£o", "4Ô∏è‚É£ Revis√£o Final"])

# Tab 1: Fatos do Caso
with tab1:
    st.markdown("<h2 class='sub-header'>Etapa 1: Coleta de Informa√ß√µes e An√°lise Inicial</h2>", unsafe_allow_html=True)
    
    with st.form("caso_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            nome_cliente = st.text_input("Nome do Cliente")
            tipo_acao = st.selectbox(
                "Tipo de A√ß√£o",
                ["Selecione o tipo", "A√ß√£o de Cobran√ßa", "A√ß√£o de Indeniza√ß√£o", "Mandado de Seguran√ßa", 
                 "A√ß√£o de Despejo", "A√ß√£o Revisional", "A√ß√£o Trabalhista", "A√ß√£o de Alimentos",
                 "A√ß√£o de Usucapi√£o", "A√ß√£o Possess√≥ria", "A√ß√£o de Execu√ß√£o", "Outro"]
            )
        
        with col2:
            cpf_cliente = st.text_input("CPF/CNPJ do Cliente")
            comarca = st.text_input("Comarca")
        
        st.markdown("### Descri√ß√£o do Caso")
        st.markdown("Descreva detalhadamente os fatos, incluindo datas, valores e pessoas envolvidas.")
        descricao_caso = st.text_area("", height=250, placeholder="Exemplo: No dia 15/03/2025, o requerente adquiriu um produto com defeito...")
        
        col1, col2 = st.columns(2)
        with col1:
            documentos_relevantes = st.text_area("Documentos e Provas Dispon√≠veis", height=100, 
                                              placeholder="Exemplo: Contrato assinado, comprovante de pagamento, notifica√ß√£o extrajudicial...")
        
        with col2:
            pretensao_cliente = st.text_area("O que o Cliente Deseja Obter", height=100,
                                          placeholder="Exemplo: Indeniza√ß√£o por danos morais e materiais, restitui√ß√£o de valores pagos...")
        
        analisar_caso = st.form_submit_button("Analisar Caso")
    
    if analisar_caso:
        if not nome_cliente or not cpf_cliente or not descricao_caso or tipo_acao == "Selecione o tipo":
            st.error("Por favor, preencha todos os campos obrigat√≥rios.")
        else:
            with st.spinner("Analisando o caso... Por favor aguarde."):
                # Armazenar dados do cliente para uso posterior
                st.session_state.dados_cliente = {
                    "nome": nome_cliente,
                    "cpf_cnpj": cpf_cliente,
                    "tipo_acao": tipo_acao,
                    "comarca": comarca,
                    "pretensao": pretensao_cliente
                }
                
                caso_completo = f"""
                DADOS B√ÅSICOS:
                Cliente: {nome_cliente} ({cpf_cliente})
                Tipo de A√ß√£o: {tipo_acao}
                Comarca: {comarca}
                
                DESCRI√á√ÉO DETALHADA DOS FATOS:
                {descricao_caso}
                
                DOCUMENTOS E PROVAS DISPON√çVEIS:
                {documentos_relevantes}
                
                PRETENS√ÉO DO CLIENTE:
                {pretensao_cliente}
                """
                
                # Chamar o agente Analisador
                st.session_state.analise_inicial = consultar_groq("Analisador", caso_completo)
                
                # Atualizar etapa atual
                st.session_state.etapa_atual = 2
                
                st.markdown("<h3 class='step-header'>Resultado da An√°lise Inicial</h3>", unsafe_allow_html=True)
                st.markdown("<div class='result-area'>", unsafe_allow_html=True)
                st.write(st.session_state.analise_inicial)
                st.markdown("</div>", unsafe_allow_html=True)
                
                st.success("‚úÖ An√°lise inicial conclu√≠da! Avance para a etapa de Pesquisa Jur√≠dica.")
                
                # Bot√£o para ir √† pr√≥xima aba
                if st.button("Ir para Pesquisa Jur√≠dica"):
                    st.experimental_set_query_params(tab="tab2")
                    st.experimental_rerun()

# Tab 2: Pesquisa Jur√≠dica
with tab2:
    st.markdown("<h2 class='sub-header'>Etapa 2: Pesquisa Jur√≠dica Aprofundada e Estrat√©gia</h2>", unsafe_allow_html=True)
    
    if not st.session_state.analise_inicial:
        st.warning("‚ö†Ô∏è Por favor, complete a etapa de an√°lise inicial primeiro.")
    else:
        st.markdown("<h3 class='step-header'>Resumo da An√°lise Inicial</h3>", unsafe_allow_html=True)
        st.markdown("<div class='result-area'>", unsafe_allow_html=True)
        st.write(st.session_state.analise_inicial)
        st.markdown("</div>", unsafe_allow_html=True)
        
        col1, col2 = st.columns([3, 1])
        with col1:
            if st.button("Realizar Pesquisa Jur√≠dica", key="btn_pesquisa"):
                with st.spinner("Realizando pesquisa jur√≠dica e desenvolvendo estrat√©gias... Esta etapa pode levar alguns minutos."):
                    # Chamar o agente Pesquisador
                    st.session_state.pesquisa_juridica = consultar_groq("Pesquisador", "", 
                                                                      {"analise_inicial": st.session_state.analise_inicial})
                    
                    # Extrair estrat√©gias para sele√ß√£o
                    st.session_state.estrategias_disponiveis = extrair_estrategias(st.session_state.pesquisa_juridica)
                    
                    # Atualizar etapa atual
                    st.session_state.etapa_atual = 3
                    
                    st.success("‚úÖ Pesquisa jur√≠dica conclu√≠da!")
        
        # Se j√° temos a pesquisa jur√≠dica, mostrar resultado
        if st.session_state.pesquisa_juridica:
            st.markdown("<h3 class='step-header'>Resultado da Pesquisa Jur√≠dica</h3>", unsafe_allow_html=True)
            st.markdown("<div class='result-area'>", unsafe_allow_html=True)
            st.write(st.session_state.pesquisa_juridica)
            st.markdown("</div>", unsafe_allow_html=True)
            
            # Sele√ß√£o de estrat√©gia
            st.markdown("<h3 class='step-header'>Selecione a Estrat√©gia Jur√≠dica</h3>", unsafe_allow_html=True)
            st.markdown("Escolha a estrat√©gia que melhor se ad√©qua ao caso e objetivos do cliente:")
            
            estrategia_selecionada = st.radio("", st.session_state.estrategias_disponiveis)
            st.session_state.estrategia_escolhida = estrategia_selecionada
            
            # Extrair e mostrar detalhes da estrat√©gia selecionada
            if estrategia_selecionada != "Estrat√©gia n√£o identificada":
                inicio_estrategia = st.session_state.pesquisa_juridica.find(estrategia_selecionada)
                if inicio_estrategia != -1:
                    # Procurar o pr√≥ximo t√≠tulo de estrat√©gia ou o final do texto
                    proximo_match = re.search(r"ESTRAT√âGIA\s*\d+\s*:", st.session_state.pesquisa_juridica[inicio_estrategia + len(estrategia_selecionada):])
                    
                    if proximo_match:
                        fim_estrategia = inicio_estrategia + len(estrategia_selecionada) + proximo_match.start()
                        detalhes_estrategia = st.session_state.pesquisa_juridica[inicio_estrategia:fim_estrategia].strip()
                    else:
                        # Se n√£o houver pr√≥xima estrat√©gia, pegar at√© o final ou at√© um marcador comum como "CONCLUS√ÉO"
                        fim_match = re.search(r"(CONCLUS√ÉO|CONSIDERA√á√ïES FINAIS|$)", st.session_state.pesquisa_juridica[inicio_estrategia + len(estrategia_selecionada):])
                        if fim_match:
                            fim_estrategia = inicio_estrategia + len(estrategia_selecionada) + fim_match.start()
                            detalhes_estrategia = st.session_state.pesquisa_juridica[inicio_estrategia:fim_estrategia].strip()
                        else:
                            detalhes_estrategia = st.session_state.pesquisa_juridica[inicio_estrategia:].strip()
                    
                    st.markdown("<div class='strategy-card'>", unsafe_allow_html=True)
                    st.markdown(f"<p class='strategy-title'>{estrategia_selecionada}</p>", unsafe_allow_html=True)
                    st.write(detalhes_estrategia.replace(estrategia_selecionada, "").strip())
                    st.markdown("</div>", unsafe_allow_html=True)
            
            # Bot√£o para ir √† pr√≥xima aba
            if st.button("Ir para Reda√ß√£o da Peti√ß√£o"):
                st.experimental_set_query_params(tab="tab3")
                st.experimental_rerun()

# Tab 3: Reda√ß√£o da Peti√ß√£o
with tab3:
    st.markdown("<h2 class='sub-header'>Etapa 3: Constru√ß√£o da Peti√ß√£o Inicial</h2>", unsafe_allow_html=True)
    
    if not st.session_state.pesquisa_juridica or not st.session_state.estrategia_escolhida:
        st.warning("‚ö†Ô∏è Por favor, complete a etapa de pesquisa jur√≠dica primeiro.")
    else:
        st.markdown("<h3 class='step-header'>Estrat√©gia Selecionada</h3>", unsafe_allow_html=True)
        st.markdown("<div class='info-card'>", unsafe_allow_html=True)
        st.write(st.session_state.estrategia_escolhida)
        st.markdown("</div>", unsafe_allow_html=True)
        
        st.markdown("<h3 class='step-header'>Informa√ß√µes Adicionais para a Peti√ß√£o</h3>", unsafe_allow_html=True)
        
        # Formul√°rio para informa√ß√µes complementares
        with st.form("info_peticao_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                endereco_cliente = st.text_input("Endere√ßo Completo do Cliente", 
                                             placeholder="Rua, n√∫mero, bairro, cidade, CEP")
                advogado_nome = st.text_input("Nome do Advogado")
                oab_numero = st.text_input("N√∫mero da OAB")
            
            with col2:
                parte_contraria = st.text_input("Nome da Parte Contr√°ria", 
                                            placeholder="Nome completo do r√©u/requerido")
                endereco_contrario = st.text_input("Endere√ßo da Parte Contr√°ria", 
                                               placeholder="Rua, n√∫mero, bairro, cidade, CEP")
                valor_causa = st.text_input("Valor da Causa", placeholder="R$ 0,00")
            
            # Op√ß√£o de negocia√ß√£o
            conciliacao = st.radio("Deseja audi√™ncia de concilia√ß√£o/media√ß√£o?", 
                                ["Sim", "N√£o"])
            
            # Bot√£o para gerar peti√ß√£o
            gerar_peticao = st.form_submit_button("Redigir Peti√ß√£o Inicial")
        
        if gerar_peticao:
            # Verificar campos obrigat√≥rios
            if not endereco_cliente or not parte_contraria or not valor_causa:
                st.error("Por favor, preencha todos os campos obrigat√≥rios.")
            else:
                with st.spinner("Redigindo a peti√ß√£o inicial... Este processo pode levar alguns minutos."):
                    # Atualizar dados do cliente
                    dados_cliente_completos = st.session_state.dados_cliente.copy()
                    dados_cliente_completos.update({
                        "endereco": endereco_cliente,
                        "advogado_nome": advogado_nome,
                        "oab_numero": oab_numero,
                        "parte_contraria": parte_contraria,
                        "endereco_contrario": endereco_contrario,
                        "valor_causa": valor_causa,
                        "conciliacao": conciliacao
                    })
                    
                    # Converter para string formatada
                    dados_cliente_str = json.dumps(dados_cliente_completos, indent=2)
                    
                    # Chamar o agente Redator
                    st.session_state.peticao_inicial = consultar_groq("Redator", "", {
                        "pesquisa_juridica": st.session_state.pesquisa_juridica,
                        "estrategia_escolhida": st.session_state.estrategia_escolhida,
                        "dados_cliente": dados_cliente_str
                    })
                    
                    # Atualizar etapa atual
                    st.session_state.etapa_atual = 4
                    
                    st.success("‚úÖ Peti√ß√£o inicial redigida!")
        
        # Se j√° temos a peti√ß√£o inicial, mostrar resultado
        if st.session_state.peticao_inicial:
            st.markdown("<h3 class='step-header'>Peti√ß√£o Inicial</h3>", unsafe_allow_html=True)
            st.markdown("<div class='result-area'>", unsafe_allow_html=True)
            st.write(st.session_state.peticao_inicial)
            st.markdown("</div>", unsafe_allow_html=True)
            
            # Bot√£o para ir √† pr√≥xima aba
            if st.button("Ir para Revis√£o Final"):
                st.experimental_set_query_params(tab="tab4")
                st.experimental_rerun()

# Tab 4: Revis√£o Final
with tab4:
    st.markdown("<h2 class='sub-header'>Etapa 4: Revis√£o e Aprimoramento Final</h2>", unsafe_allow_html=True)
    
    if not st.session_state.peticao_inicial:
        st.warning("‚ö†Ô∏è Por favor, complete a etapa de reda√ß√£o da peti√ß√£o primeiro.")
    else:
        st.markdown("<h3 class='step-header'>Peti√ß√£o Inicial Redigida</h3>", unsafe_allow_html=True)
        st.markdown("<div class='result-area'>", unsafe_allow_html=True)
        st.write(st.session_state.peticao_inicial)
        st.markdown("</div>", unsafe_allow_html=True)
        
        if st.button("Revisar e Aprimorar Peti√ß√£o"):
            with st.spinner("Revisando a peti√ß√£o final... Este processo pode levar alguns minutos."):
                # Chamar o agente Revisor
                st.session_state.peticao_revisada = consultar_groq("Revisor", "", {
                    "peticao": st.session_state.peticao_inicial
                })
                
                st.success("‚úÖ Peti√ß√£o revisada e aprimorada!")
        
        # Se j√° temos a peti√ß√£o revisada, mostrar resultado
        if st.session_state.peticao_revisada:
            # Separar coment√°rios da peti√ß√£o revisada
            try:
                # Procurar por padr√µes comuns de separa√ß√£o
                padrao_separacao = "PETI√á√ÉO REVISADA:|VERS√ÉO FINAL:|DOCUMENTO REVISADO:"
                partes = re.split(padrao_separacao, st.session_state.peticao_revisada, flags=re.IGNORECASE)
                
                if len(partes) > 1:
                    comentarios = partes[0].strip()
                    peticao_final = partes[1].strip()
                else:
                    # Se n√£o conseguiu separar, mostra tudo na parte de coment√°rios
                    comentarios = "N√£o foi poss√≠vel separar os coment√°rios da peti√ß√£o revisada."
                    peticao_final = st.session_state.peticao_revisada
            except:
                comentarios = "Erro ao processar a peti√ß√£o revisada."
                peticao_final = st.session_state.peticao_revisada
            
            # Mostrar coment√°rios do revisor
            st.markdown("<h3 class='step-header'>Coment√°rios do Revisor</h3>", unsafe_allow_html=True)
            st.markdown("<div class='info-card'>", unsafe_allow_html=True)
            st.write(comentarios)
            st.markdown("</div>", unsafe_allow_html=True)
            
            # Mostrar peti√ß√£o final
            st.markdown("<h3 class='step-header'>Peti√ß√£o Final Revisada</h3>", unsafe_allow_html=True)
            st.markdown("<div class='result-area'>", unsafe_allow_html=True)
            st.write(peticao_final)
            st.markdown("</div>", unsafe_allow_html=True)
            
            # Op√ß√µes de download
            st.markdown("<h3 class='step-header'>Baixar Documentos</h3>", unsafe_allow_html=True)
            
            col1, col2 = st.columns(2)
            with col1:
                st.download_button(
                    label="üìÑ Baixar Peti√ß√£o em formato TXT",
                    data=peticao_final,
                    file_name=f"peticao_{st.session_state.dados_cliente.get('tipo_acao', 'inicial')}.txt",
                    mime="text/plain"
                )
            
            with col2:
                # Para um download como docx, precisar√≠amos converter o texto para esse formato
                # Neste exemplo, estamos apenas baixando como txt com extens√£o docx
                st.download_button(
                    label="üìù Baixar Peti√ß√£o em formato DOCX",
                    data=peticao_final,
                    file_name=f"peticao_{st.session_state.dados_cliente.get('tipo_acao', 'inicial')}.docx",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )
            
            # Bot√£o para reiniciar o processo
            if st.button("‚ú® Iniciar Novo Caso"):
                # Limpar todas as vari√°veis de sess√£o
                for key in list(st.session_state.keys()):
                    if key not in ['logged_in', 'etapa_atual']:  # Manter apenas login e etapa
                        del st.session_state[key]
                
                # Resetar etapa atual
                st.session_state.etapa_atual = 1
                
                # Voltar para a primeira aba
                st.experimental_set_query_params()
                st.experimental_rerun()

# Rodap√©
st.markdown("---")
st.markdown("<p style='text-align: center; color: #FFD700;'>¬© 2025 ADVJESUS | Sistema Avan√ßado de Reda√ß√£o Jur√≠dica</p>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center; color: #999; font-size: 0.8rem;'>Baseado na Metodologia Advogado 5.0</p>", unsafe_allow_html=True)
